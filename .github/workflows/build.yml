名称：构建
上：[推，拉请求]
职位：
  构建：
    运行： $ {  {矩阵.os }    }
    策略：
      快速失败：false
      矩阵：
: [ windows-最新、 macos-最新、 ubuntu-最新]
        构建类型：[ RelWithDebInfo ，调试]
        启用用户界面：[关闭]
        包括：
          -操作系统： ubuntu-最新
            构建类型： 调试
            启用用户界面：open
    步骤：
    -使用：actions/checkout@v3
      与：
        子模块：“梯度”
    -名称：ccache
      使用： hendrikmuhs/ccache-action@v1
      if : $ {  { runner.os == 'Linux' || runner.os == 'macOS'    }    }
      与：
        键： $ {     { Matrix.os }      } -$ {      { Matrix.enable_ui }      } -$ {      { Matrix.build_type }     }
    -使用：turtlesec-no/get-ninja@main
    -使用： ilammy/msvc-dev-cmd@v1
      如果   : runner.os == 'Windows'
    -名称：windows-2022和cmake 3.25.0的解决方法
      如果 : runner.os == 'Windows'
      外壳： bash
      运行： rm -rf C ： /草莓/
    -名称：安装依赖项
      外壳： bash
      运行：|
        if [ [   "${{ runner.os }}" == "Linux"    ]    ] ; 然后
          sudo apt-get update-qq
          sudo apt-get install -y \
            libx11-dev libxcursor-dev libxi-dev
        菲
    -名称：生成Makefile
      外壳： bash
      运行：|
        if [     [      "${{ runner.os }}" == "Windows"      ]     ] ; 然后
          导出enable_ccache=关闭
        另外
          导出enable_ccache=on
        菲
        cmake -S 。-B 构建 -G 忍者 \
          -DCMAKE_BUILD_TYPE=$ {     {矩阵.build_type }     } \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=ON \
          -DENABLE_UI=$ {     { Matrix.enable_ui }     } \
          -DENABLE_CCACHE=$enable_ccache
    -名称：编译
      外壳： bash
      运行：|
        CD 构建 && 忍者
    -名称：运行C++测试
      外壳： bash
      运行：|
        如果[  [    "     ${{ runner.os }}" == "Linux"    ]  ] ; 然后
          导出XVFB=xvfb-run
        菲
        cd build && $XVFB ctest --output-on-failure
    - name: Running CLI Tests
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        export ASEPRITE=$PWD/build/bin/aseprite
        cd tests
        $XVFB bash run-tests.sh
