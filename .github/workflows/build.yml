name: 名称：构建
on: [上：[推，拉请求], pull_request]
jobs:
  build:
    runs-on:     运行：${{matrix.os}}{{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [        操作系统：[windows-最新、macos-最新、ubuntu-最新], macos-latest, ubuntu-latest]
        build_type: [        build_type：[RelWithDebInfo，调试], Debug]
        enable_ui: [        启用用户界面：[关闭]]
        include:
          - os:           - 操作系统：ubuntu-最新
            build_type:             构建类型：调试
            enable_ui: on
    steps:
    - uses:     - 使用：actions/checkout@v3
      with:
        submodules: 'recursive'
    - name:     - 名称：ccache
      uses:       使用：hendrikmuhs/ccache-action@v1
      如果： ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      和：
        键：${{matrix.os}}-${{matrix.enable_ui}}-${{matrix.build_type}}{{matrix.os}}-${{matrix.enable_ui}}-${{matrix.build_type}}
    -     - 使用：turtlesec-no/get-ninja@main
    -     - 使用：ilammy/msvc-dev-cmd@v1
      if:       if: runner.os == 'Windows''Windows'
    -     - 名称：windows-2022 和 cmake 3.25.0 的解决方法
      if:       if: runner.os == 'Windows''Windows'
      外壳：bash
      运行： rm -rf C:/Strawberry/
    -     - 名称：安装依赖项
      外壳：bash
      运行： |
        if [[ "${{ runner.os }}" == "Linux" ]] ; 然后[[ "${{ runner.os }}" == "Linux" ]] ; 然后
          sudo apt-get update-qq
          sudo apt-get install -y \
            libx11-dev libxcursor-dev libxi-dev
name: 名称：构建
on: [上：[推，拉请求], pull_request]
jobs:
  build:
    runs-on:     运行：${{matrix.os}}{{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [        操作系统：[windows-最新]]
        build_type: [        构建类型：[发布]]
        enable_ui: [        启用用户界面：[打开]]
        include:
          - os:           - 操作系统：windows-最新
            build_type:             构建类型：发布
            enable_ui: on
    steps:
    - uses:     - 使用：actions/checkout@v3
      with:
        submodules: 'recursive'
    - name:     - 名称：ccache
      uses:       使用：hendrikmuhs/ccache-action@v1
      if:       如果：runner.os == 'Linux''Linux'
      with:
        key:         键：${{matrix.os}}-${{matrix.enable_ui}}{{ matrix.os }}-${{ matrix.enable_ui }}
    - uses:     - 使用：seamiddleditch/gha-setup-ninja@master
    - uses:     - 使用：ilammy/msvc-dev-cmd@v1
      if :        if : runner.os == 'Windows' 'Windows'
    - name :      - 名称：安装依赖项
      shell :       外壳：bash
      运行：|
        if [[ "${{ runner.os }}" == "Linux" ]] ; 然后
          sudo apt-get update-qq
          sudo apt-get install -y \
            libx11-dev libxcursor-dev libxi-dev
        菲
    - name :      - 名称：生成Makefile
      shell :       外壳：bash
      运行：|
        if [[ "${{ runner.os }}" == "Windows" ]] ; 然后
          导出enable_ccache=关闭
        别的
          导出enable_ccache=on
        菲
        卷曲-L https://github.com/blueloveTH/aseprite/releases/download/v0.01/skia.zip --输出skia.zip
        7z x 滑雪.zip
        cmake -S 。-B 构建 -G 忍者 \
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}}\
          -DENABLE_UI=${{matrix.enable_ui}}\
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=./skia \
          -DSKIA_LIBRARY_DIR=./skia/out/Release-x64 \
          -DSKIA_LIBRARY=./skia/out/Release-x64/skia.lib
    -名称:      - 名称：编译
      shell :       外壳：bash
      运行：|
        CD 构建 && 忍者
    -使用:      - 使用：actions/upload-artifact@v3
      与：
        name :         名称：阿赛普瑞特
        路径：|
          D:/a/aseprite/aseprite/build/bin/data
          D:/a/aseprite/aseprite/build/bin/aseprite.exe
